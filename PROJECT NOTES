#shebang, lets the ruby interpreter what environment you want to run. telling it what it's going to be running.
"we want to use the ruby interpreter in order to run this file"

Basic for pushing to Github - push OFTEN.
1. git pull
2. git push

1. Plan gem, imagine interface 
2. Google some premade gems for project structure
3. Start with entry point - the file run
4. Force that to build the interface
5. Stub out the interface
6. Start coding things
7. Discover Objects
8. Program

Separation of Concerns
1. Scraper Class - Scrapes the raw data from NBA.com
2. Player Class - Creates Instances of each player (name, url, description, bio)
3. CLI - Controller

2 Levels Deep
- First Level: List of 50 greatest NBA Players
- Second Level: The individual player page + summary of career


Basic Interface:

def run
   HomepageScraper.scrape_players - Scrapes the data, loads everything up 
   
   welcome #-> welcome the user, accepts an input to get to the next level of the menu
      #if input == "start" -> self.list_players
      #else -> puts "I'm sorry, I thought you wanted to learn something today!"

   # choose_player # -> accepts an index,  
      # -> sets local variable of player, then uses the index to pick the player's position in the Player.all array 
      # scrapes the player's bio, loads it up
      # calls self.display_player_info(player)



Finishing Touches
- The event loop - DONE
- Need to incorporate Shaq - DONE
- Paginate the players - DONE
- require gem that formats the return outputs  [https://github.com/ruby-formatter/rufo]


   
   
   def print_players(from_input)
      puts ""
      puts "---------- NBA Legends #{from_input} - #{from_input+9} ----------"
      puts ""
      Player.all[from_input-1, 10].each.with_index(from_input) do |player, index|
        puts "#{index}. #{player.name}"
      end  
   end 


    # def self.scrape_players
    #   page = open(BASE_URL)
    #   parsed_HTML = Nokogiri::HTML(page)
    #   name_lis = parsed_HTML.css("div.field-item li")
    #   # try using select to get values != nil ->>> use .nil?
    #   name_lis.select do |li|
    #     name = li.css("strong a").text.strip
    #     url = li.css("a").attribute("href").value.strip if li.css("a").attribute("href").value != nil               #css("a").attr("href").value if li.css("a").attr("href").value.nil? == false #rescue nil
    #       # if data scraped contains a value == nil, don't instantiate player
    #       # if url.nil? != false 
    #       # else instantiate player

    #       # [element = true, element = nil].select {|el| el.nil? != false}

    #     Player.new(name,url)
        # binding.pry


  #    HomepageScraper.scrape_bio(player)
   #    self.display_player_info(player)

   #    # while input != "exit"
   #    puts "For more information on this player, hit 'Y'. To exit, enter 'N' or 'Exit'. "

   #    input = gets.strip.downcase

   #    if input == "y"
   #       puts "\n<<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>>\n"
   #       self.display_player_bio(player)
      
   #    elsif user_input == "back"

   #       welcome

   #    elsif input == "n" || input == "exit"
   #       puts "\n<<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>><<<<>>>>\n"
   #       puts "\n\nRemember, basketball head, ball is life.\n\n"
   #       return 

   #    else
   #       puts " "
   #       puts "You seem confused, bruh, how's a fresh start sound?"
   #    end
   # end


      # puts " "
      # user_input = gets.strip.downcase

      # if "

      #    choose_player

      
   # end



    #each{|element| puts "#{html.css("div.paragraphs p")[0].text}\n\n"} # need to make the bio more readable instead of in a large chunk of text

   2nd level scraper: player.bio - > Method: Nokogiri::XML::Node#content -> player_object.bio = html.css("div.paragraphs p").map{|paragraph| paragraph.content}

   Possible Refactor Notes ----> Desired Behavior
   # puts "#{html.css("div.paragraphs p")[0].text}\n\n"
      # puts "#{html.css("div.paragraphs p")[1].text}\n\n"
      # puts "#{html.css("div.paragraphs p")[2].text}\n\n"
      # puts "#{html.css("div.paragraphs p")[3].text}\n\n"
      # binding.pry


      1. Run the Program
      2. Accept input "start" to enter the main menu 
         -> if you enter anything other than start, an error needs to come up, and re-prompt you 
      3. 


      Edge Cases:
      Accepts input > 50, breaks the Program
      when you don't enter a number for player, it automatically selects James Worthy
      Shaq breaks Program
      Kareem breaks program 